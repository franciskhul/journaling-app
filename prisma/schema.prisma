// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid()) @db.Uuid
  name         String
  email        String         @unique
  password     String
  role         Role           @default(USER)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Journal      JournalEntry[]
  categories   Category[]     @relation("UserCategories")
  UserCategory UserCategory[]
  tokens       RefreshToken[]
  JWT_Denylist JWT_Denylist[]

  @@index([email])
  @@index([role])
}

enum Role {
  ADMIN
  USER
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@index([createdAt])
}

model JWT_Denylist {
  id        String   @id @default(uuid()) @db.Uuid
  token     String   @unique
  expiresAt DateTime
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([token])
}

model JournalEntry {
  id              String                 @id @default(uuid()) @db.Uuid
  userId          String                 @db.Uuid
  title           String
  content         String                 @db.Text
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  user            User                   @relation(fields: [userId], references: [id])
  categories      Category[]             @relation("JournalCategories")
  JournalCategory JournalEntryCategory[]

  @@index([userId])
  @@index([title])
  @@index([createdAt])
}

model Category {
  id              String  @id @default(uuid()) @db.Uuid
  name            String  @unique
  systemGenerated Boolean @default(false)

  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  journals        JournalEntry[]         @relation("JournalCategories")
  JournalCategory JournalEntryCategory[]
  users           User[]                 @relation("UserCategories")
  UserCategory    UserCategory[]

  @@index([createdAt])
}

model JournalEntryCategory {
  journalId  String @db.Uuid
  categoryId String @db.Uuid

  journal  JournalEntry @relation(fields: [journalId], references: [id], onDelete: Cascade)
  category Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([journalId, categoryId]) // Composite primary key
}

model UserCategory {
  userId     String @db.Uuid
  categoryId String @db.Uuid

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([userId, categoryId]) // Composite primary key
}
